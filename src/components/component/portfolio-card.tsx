'use client'
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/AqqckCqRP55
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import Image from "next/image"
import { useState } from "react"
import { X } from "lucide-react"
import { Input } from "../ui/input"
import { useAppSelector } from "@/lib/store/hooks"
import gql from "graphql-tag"
import { imageToBase64 } from "@/lib/imageTObase64"
import client from "@/lib/apolloClient"
import { toast } from "sonner"
import { DemoPortfolioPic } from "../utils/skills"
import { setPortfolioState } from "@/lib/store/authSlice"
const Portfolio_Mutation = gql`
 mutation Mutation($input: PortfolioInput) {
  Portfolio(input: $input) {
    error
    success
    Portfolio {
      userId
      link
      porPic
    }
  }
}
`;
export function PortfolioCard() {
  const [isEdit,setIsEdit]=useState(false);
  const [formState, setFormState] = useState({
    userId: 0,
    link:"",
    porPic:""
  });
  const [companyLogoFile, setCompanyLogoFile] = useState<File | null>(null);
  const userId = useAppSelector((state) => state.auth.user?.id);
  const portfolio =useAppSelector((state)=>state.auth.portfolio)
  // console.log(portfolio)
  const handleChange = (event: any) => {
    const fieldName = event.target.name;
    const fieldValue = event.target.value;

    setFormState({
      ...formState,
      [fieldName]: fieldValue,
    });
  };
  const handleUpdatePortfolio = async () => {
    if (companyLogoFile) {
      const str = await imageToBase64(companyLogoFile);
      formState.porPic = str;
    }else{
      formState.porPic=DemoPortfolioPic
    }
    const uid = userId ? Number(userId) : 0; // or const uid = +userId || 0;
    formState.userId =uid;
    try {
      console.log(formState)
      const { data } = await client.mutate({
        mutation: Portfolio_Mutation,
        variables: {
          input: formState,
        },
      });
      console.log(data)
      if (data.Portfolio.success) {
        dispatch(setPortfolioState(data.Portfolio.Portfolio))
        toast.success("PortFolio Updated Successfully",{
          duration:1000
        });
      }else{
        toast.error("Error Updating Portfolio");
      }
    } catch (error) {
      console.log(error);
    }
  };



  return (
    <Card className="w-full h-[345px] rounded-lg overflow-hidden">
      <div className="flex items-center justify-between p-4 bg-background">
        <h3 className="text-lg font-semibold">Latest Portfolio</h3>
        <Button variant="ghost" size="icon">
          {isEdit?<X onClick={()=>setIsEdit(!isEdit)}/>:<FilePenIcon className="h-5 w-5" onClick={()=>setIsEdit(!isEdit)} />}
          <span className="sr-only">Edit</span>
        </Button>
      </div>
     {isEdit?<div className="h-full p-2 flex flex-col  pl-6 gap-2">
      <h1 className="font-bold">Enter Link of Portfolio</h1>
      <Input
        type="text"
        placeholder="Enter the link of Portfolio"
        className="w-3/5 "
        onChange={handleChange}
        value={formState.link}
        name="link"
        required
      />
      <h1 className="font-bold">Website Screenshot</h1>

      <Input
        id="picture"
        type="file"
        className="w-4/5 mb-4"
        required
        onChange={(e) => {
          if (e.target.files && e.target.files.length > 0) {
            setCompanyLogoFile(e.target.files[0]);
            
          }
        }}
      />
  <Button onClick={handleUpdatePortfolio}>Update Portfolio</Button>
     </div>:
      <Link href={portfolio?.link||""} className="group block" target="block">
      <div className="p-4">
        <Image
          src={portfolio?.porPic||""}
          alt="Card Image"
          width={400}
          height={240}
          className="w-full h-60 object-cover group-hover:scale-105 transition-transform duration-300 ease-in-out"
        />
      </div>
    </Link>}
    </Card>
  )
}

function FilePenIcon(props:any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z" />
    </svg>
  )
}
function dispatch(arg0: any) {
  throw new Error("Function not implemented.")
}

