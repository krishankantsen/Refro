'use client'
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/VaXSiA2PZwp
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { useEffect, useState } from "react";
import client from "@/lib/apolloClient";
import gql from "graphql-tag";
import { useAppSelector } from "@/lib/store/hooks";
type PlacedUser = {
  name: string;
  jobRole:String;
  profilePic:String
}
const GetPlacedUser_query = gql`
query Query($input: Int) {
  GetPlacedUsers(input: $input) {
    name
    jobRole
    profilePic
    
  }
}
`;

export function UserList() {
  const [users,setUsers]=useState<PlacedUser[]>([])
  const userId = useAppSelector((state) => state.auth.user?.id);
  const GetPlacedUser = async()=>{
    try {
      const response=await client.query({
        query:GetPlacedUser_query,
        variables: {
          input: Number(userId),
        },
      })
      setUsers(response.data.GetPlacedUsers)
    console.log(response)
    } catch (error) {
      console.log("hii");
      
      console.log(error)
    }
  }
  useEffect(() => {
    GetPlacedUser()
  }, []);
  return (
    <Card className="w-full max-w-4xl  z-0">
      <CardHeader className="border-b  py-4">
        <CardTitle>Placed Users</CardTitle>
      </CardHeader>
      <CardContent className="max-h-[500px] overflow-y-auto">
        <div className="grid gap-4  py-4">
          
          {users.map((user,index)=>{
            const objString: String = new String(user.profilePic);
            const primitiveString: string = objString.toString();  // Convert to primitive string
            
            return <div className="flex items-center gap-4" key={index}>
            <Avatar className="border">
              <AvatarImage src={primitiveString} />
              <AvatarFallback>CN</AvatarFallback>
            </Avatar>
            <div className="flex-1">
              <h4 className="font-bold">{user.name}</h4>
              <p className="text-sm text-muted-foreground">{user.jobRole}</p>
            </div>
          </div>
          })}
        
            
          
        </div>
      </CardContent>
    </Card>
  );
}
